static public int girth(Graph Gin) {     // returns minimum girth >= 3



   uGraph G = new uGraph(Gin);          // compute undirected girth

   int n=G.order();



   int best = n+1;                      // girth n+1 if no cycles found



   for (int i=0; i<n-2; i++) {           // look for a cycle from all but last two

      BitSet span = new BitSet(n);

      span.set(i);

      int depth = 1;                     // do a BFS search keeping track of depth

      Vector distList = new Vector();

      distList.addElement( new Integer(i) );



      while (depth*2 <= best && best > 3) {

         Vector nextList = new Vector();



         for (Enumeration e = distList.elements(); e.hasMoreElements(); ) {

            Vector nbrs = G.neighbors(((Integer) e.nextElement()).intValue());



            for (int k=0; k < nbrs.size(); k++) {

               int u = ((Integer) nbrs.elementAt(k)).intValue();



               if (!span.get(u)) {

                  span.set(u);

                  nextList.addElement(new Integer(u));

               } else {                       // we have found some walk/cycle

                  // is there a cross edge at this level

                  if ( distList.contains(new Integer(u)) ) {

                     best = depth*2-1; break;

                  }



                  // else even length cycle (as an upper bound)

                  if ( nextList.contains(new Integer(u)) ) {

                     best = depth*2;

                  }

               }

            }

         } // for vertices at current depth



         distList = nextList;            // next try set of vertices further away

         depth++;

      }

   }



   return best;



} 